<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="plCategories.Text" xml:space="preserve">
    <value>Categories</value>
  </data>
  <data name="plCategories.Help" xml:space="preserve">
    <value>Category or categories to be displayed. Note: Selecting no categories is the same as selecting all categories.</value>
  </data>
  <data name="ControlTitle_settings.Text" xml:space="preserve">
    <value>Comments View Settings</value>
  </data>
  <data name="plAltItemTemplate.Help" xml:space="preserve">
    <value>The alternating item template specifes what is displayed for each even numbered comment. If an alternating item template is not specified, the iItem template is used for both odd and even numbered comments.</value>
  </data>
  <data name="plAltItemTemplate.Text" xml:space="preserve">
    <value>Alternating Item Template</value>
  </data>
  <data name="plFooterTemplate.Help" xml:space="preserve">
    <value>The footer template specifies what is displayed at the bottom of the comments.</value>
  </data>
  <data name="plFooterTemplate.Text" xml:space="preserve">
    <value>Footer Template</value>
  </data>
  <data name="plHeaderTemplate.Help" xml:space="preserve">
    <value>The header template specifies what is displayed at the top of the comments.</value>
  </data>
  <data name="plHeaderTemplate.Text" xml:space="preserve">
    <value>Header Template</value>
  </data>
  <data name="plItemTemplate.Help" xml:space="preserve">
    <value>The item template specifies what is displayed for each odd numbered comment.</value>
  </data>
  <data name="plItemTemplate.Text" xml:space="preserve">
    <value>Item Template</value>
  </data>
  <data name="plSeparatorTemplate.Text" xml:space="preserve">
    <value>Separator Template</value>
  </data>
  <data name="plSeparatorTemplate.Help" xml:space="preserve">
    <value>The separator template specifies what displays between each comment.</value>
  </data>
  <data name="lblAvailableTokens.Text" xml:space="preserve">
    <value>[Feedback:CategoryID], [Feedback:Category], [Feedback:CategoryName], [Feedback:Subject], [Feedback:Message], [Feedback:CreatedOnDate], [Feedback:PublishedOnDate], [Feedback:FeedbackID], [Feedback:SenderName], [Feedback:SenderStreet], [Feedback:SenderCity], [Feedback:SenderRegion], [Feedback:SenderCountry], [Feedback:SenderPostalCode], [Feedback:SenderEmail], [Feedback:SenderTelephone], [Feedback:SenderRemoteAddr], [Feedback:TotalRecords]</value>
  </data>
  <data name="Feedback_AltItemTemplate.Text" xml:space="preserve">
    <value />
  </data>
  <data name="Feedback_FooterTemplate.Text" xml:space="preserve">
    <value>&lt;/div&gt;</value>
  </data>
  <data name="Feedback_HeaderTemplate.Text" xml:space="preserve">
    <value>&lt;div&gt;</value>
  </data>
  <data name="Feedback_ItemTemplate.Text" xml:space="preserve">
    <value>&lt;div&gt;&lt;div style="clear: both; font-weight: bold"&gt;[Feedback:SenderName]&amp;nbsp;&amp;nbsp;&amp;nbsp;[Feedback:CategoryName]&amp;nbsp;&amp;nbsp;&amp;nbsp;[Feedback:PublishedOnDate]&lt;br /&gt;[Feedback:Subject]&lt;/div&gt;&lt;div style="margin-top: 10px"&gt;[Feedback:Message]&lt;/div&gt;&lt;/div&gt;</value>
  </data>
  <data name="Feedback_SeparatorTemplate.Text" xml:space="preserve">
    <value>&lt;div style="padding-top: 6px; padding-bottom: 6px"&gt;&lt;hr style="width:100%; size: 1" /&gt;&lt;/div&gt;</value>
  </data>
  <data name="plEnablePager.Help" xml:space="preserve">
    <value>Would you like to enable paging of the guestbook/comments?</value>
  </data>
  <data name="plEnablePager.Text" xml:space="preserve">
    <value>Allow Paging</value>
  </data>
  <data name="plDefaultPageSize.Help" xml:space="preserve">
    <value>If you have paging enabled, this is the default pagesize of the guestbook pages</value>
  </data>
  <data name="plDefaultPageSize.Text" xml:space="preserve">
    <value>Default Page Size</value>
  </data>
  <data name="plAvailableTokens.Help" xml:space="preserve">
    <value>A list of the available tokens which may be used in the Item and AlternatingItem templates above. In addition, may of the portal and environmental tokens available in the HTML module may also be used in any of the templates.</value>
  </data>
  <data name="plAvailableTokens.Text" xml:space="preserve">
    <value>Available Tokens</value>
  </data>
  <data name="plScope.Help" xml:space="preserve">
    <value>Selects whether the source of the feedback items displayed is an aggregate of feedback from all Feedback modules of the portal or from selected modules only. Legacy behavior prior to this version was to aggregate feedback from ALL modules.</value>
  </data>
  <data name="plScope.Text" xml:space="preserve">
    <value>Scope</value>
  </data>
  <data name="Portal.Text" xml:space="preserve">
    <value>Portal (from all Feedback Modules)</value>
  </data>
  <data name="SelectedModules.Text" xml:space="preserve">
    <value>Selected Modules Only</value>
  </data>
  <data name="plFeedbackModules.Help" xml:space="preserve">
    <value>Select one or modules from this list of Feedback modules found in the portal to supply this instance of the feedback viewer/guestbook with published items.</value>
  </data>
  <data name="plFeedbackModules.Text" xml:space="preserve">
    <value>Feedback Modules</value>
  </data>
</root>