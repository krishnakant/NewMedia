<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="plListType.Text" xml:space="preserve">
    <value>List Type</value>
  </data>
  <data name="plListType.Help" xml:space="preserve">
    <value>Determines which HTML elements are used to render columns.</value>
  </data>
  <data name="ControlTitle_generatexsl.Text" xml:space="preserve">
    <value>Token Based XSLT Generator and Editor</value>
  </data>
  <data name="plColumns.Text" xml:space="preserve">
    <value>Available Fields and Context</value>
  </data>
  <data name="plColumns.Help" xml:space="preserve">
    <value>Choose Data and Context columns to be rendered by the XSL script.</value>
  </data>
  <data name="cmdInsert.Text" xml:space="preserve">
    <value>Insert</value>
  </data>
  <data name="table.Text" xml:space="preserve">
    <value>Table</value>
  </data>
  <data name="btnGenerateXslt.Text" xml:space="preserve">
    <value>Generate from HTML Template</value>
  </data>
  <data name="cmdSaveFile.Text" xml:space="preserve">
    <value>Save File and Return</value>
  </data>
  <data name="cmdRebuildContent.Text" xml:space="preserve">
    <value>Rebuild</value>
  </data>
  <data name="cmdAddColumnWithTags.Text" xml:space="preserve">
    <value>Insert Column</value>
  </data>
  <data name="confirmOnRebuild.Text" xml:space="preserve">
    <value>All changes will get lost. Are you sure you want to rebuild?</value>
  </data>
  <data name="dshHtml.Text" xml:space="preserve">
    <value>1. Edit HTML Template</value>
  </data>
  <data name="dshXslt.Text" xml:space="preserve">
    <value>2. Edit XSLT Script</value>
  </data>
  <data name="lblConfirm.Text" xml:space="preserve">
    <value>This file already exists. Do you want to overwrite?</value>
  </data>
  <data name="plFileName.Text" xml:space="preserve">
    <value>File Name</value>
  </data>
  <data name="plFileName.Help" xml:space="preserve">
    <value>File extension *.xsl will be appended automatically,&lt;br/&gt;if it is not entered by the user.&lt;br/&gt;The script will be saved to "...\[PortalHomeDirectory]\XslStyleSheets\".</value>
  </data>
  <data name="dshSave.Text" xml:space="preserve">
    <value>3. Save File</value>
  </data>
  <data name="error.Text" xml:space="preserve">
    <value>The Template is not well-formed:&lt;br/&gt;</value>
  </data>
  <data name="div.Text" xml:space="preserve">
    <value>Division</value>
  </data>
  <data name="p.Text" xml:space="preserve">
    <value>Paragraph</value>
  </data>
  <data name="plDelimiter.Text" xml:space="preserve">
    <value>Delimiter</value>
  </data>
  <data name="plDelimiter.Help" xml:space="preserve">
    <value>Enter one or more characters or HTML tag used as a column delimiter.</value>
  </data>
  <data name="plFolderName.Text" xml:space="preserve">
    <value>Folder Name</value>
  </data>
  <data name="plFolderName.Help" xml:space="preserve">
    <value>Folder where XSL scripts are stored (cannot be changed).</value>
  </data>
  <data name="cmdColumnsHelp.Text" xml:space="preserve">
    <value>Hidden Columns Help</value>
  </data>
  <data name="br.Text" xml:space="preserve">
    <value>Line Break</value>
  </data>
  <data name="ul.Text" xml:space="preserve">
    <value>Unordered List</value>
  </data>
  <data name="ol.Text" xml:space="preserve">
    <value>Ordered List</value>
  </data>
  <data name="ApplicationPath.Text" xml:space="preserve">
    <value>Application Path</value>
  </data>
  <data name="CurrentCulture.Text" xml:space="preserve">
    <value>Current Culture</value>
  </data>
  <data name="DisplayName.Text" xml:space="preserve">
    <value>Display Name</value>
  </data>
  <data name="HomePath.Text" xml:space="preserve">
    <value>Home Path</value>
  </data>
  <data name="IsAdministratorRole.Text" xml:space="preserve">
    <value>Is Administrator Role</value>
  </data>
  <data name="ModuleId.Text" xml:space="preserve">
    <value>ModuleId</value>
  </data>
  <data name="OrderBy.Text" xml:space="preserve">
    <value>Order By</value>
  </data>
  <data name="OrderDirection.Text" xml:space="preserve">
    <value>Order Direction</value>
  </data>
  <data name="Parameter.Text" xml:space="preserve">
    <value>Parameter</value>
  </data>
  <data name="PortalId.Text" xml:space="preserve">
    <value>Portal ID</value>
  </data>
  <data name="TabId.Text" xml:space="preserve">
    <value>Tab ID</value>
  </data>
  <data name="UserName.Text" xml:space="preserve">
    <value>User Name</value>
  </data>
  <data name="UserRoles.Text" xml:space="preserve">
    <value>User Roles</value>
  </data>
  <data name="chkAddSortingSupport.Text" xml:space="preserve">
    <value>Add Sorting Support </value>
  </data>
  <data name="chkAddPagingSupport" xml:space="preserve">
    <value>Add Paging Support</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>&lt;h1&gt;Token based HTML Editor and XSL Converter&lt;/h1&gt;
&lt;p&gt;Use these features to help you&amp;#160;create your own custom XSL files.&lt;/p&gt;
&lt;p&gt;Choose between different layout constructs: Table, Paragraphs and Lists with custom separators.&lt;/p&gt;
&lt;p&gt;We recommend that you&amp;#160;start with a default view and modify the HTML template to fit your needs. Add additional fields using the column selector.&lt;/p&gt;
&lt;p&gt;After you create your HTML template, convert it to an XSL template, then add additional&amp;#160;code before you save it as a file.&lt;/p&gt;
&lt;p&gt;Click &lt;strong&gt;Back&lt;/strong&gt; to return to&amp;#160;&lt;strong&gt;Form and List Configuration&lt;/strong&gt;.&lt;/p&gt;</value>
  </data>
  <data name="lblEnableSorting.Text" xml:space="preserve">
    <value>Add Sorting Support to the Style Sheet</value>
  </data>
  <data name="lblEnableSorting.Help" xml:space="preserve">
    <value>Enable this setting to sort displayed records&lt;br&gt;according to the Sort Column and Sort Direction&lt;br&gt;specified in Form and List Configuration.</value>
  </data>
  <data name="lblEnablePaging.Text" xml:space="preserve">
    <value>Add Paging Support to the Style Sheet</value>
  </data>
  <data name="lblEnablePaging.Help" xml:space="preserve">
    <value>Enable this setting to add a pager for the displayed list.&lt;br&gt;Paging is specified in Form and List Configuration.</value>
  </data>
  <data name="lblEnableSearch.Text" xml:space="preserve">
    <value>Add Search Box to the Style Sheet</value>
  </data>
  <data name="lblEnableSearch.Help" xml:space="preserve">
    <value>Enable this setting to add a search box above&lt;br&gt;the displayed list where users can enter text to search&lt;br&gt;in columns specified as Searchable.</value>
  </data>
  <data name="lblShowDetailView.Text" xml:space="preserve">
    <value>Add Detail View</value>
  </data>
  <data name="lblShowDetailView.Help" xml:space="preserve">
    <value>Enable this setting to add a link to an additional Detail View,&lt;br&gt;showing the columns of the currently selected record only.</value>
  </data>
  <data name="dshOptions.Text" xml:space="preserve">
    <value>Options</value>
  </data>
  <data name="dshListView.Text" xml:space="preserve">
    <value>List View</value>
  </data>
  <data name="dshDetailView.Text" xml:space="preserve">
    <value>Detail View</value>
  </data>
  <data name="noTransformButValid.Text" xml:space="preserve">
    <value>List type cannot be changed, but the template still seems to be valid.</value>
  </data>
  <data name="nothing.Text" xml:space="preserve">
    <value>Nothing</value>
  </data>
  <data name="lblSearchIsObsolete.Text" xml:space="preserve">
    <value>XSL-Search is obsolete, please use the build in Search instead. </value>
  </data>
  <data name="plHeader.Help" xml:space="preserve">
    <value>Shows textbox for header definition</value>
  </data>
  <data name="plHeader.Text" xml:space="preserve">
    <value>Enable header definition</value>
  </data>
  <data name="plHeaderList.Help" xml:space="preserve">
    <value>Choose columns to use as Headers.&lt;br&gt;If sorting is enabled, Headers can be clicked&lt;br&gt;to alter the sort sequence.</value>
  </data>
  <data name="plHeaderList.Text" xml:space="preserve">
    <value>Available Headers</value>
  </data>
</root>